#!/usr/bin/env bun\n/**\n * Test script for ElevenLabs AI integration\n * Tests the personalization service with the 4 target sports\n */\n\nimport { ElevenLabsAIPersonalizationService } from '../services/elevenlabs-ai-personalization';\nimport { PersonalizationRequest } from '../types/personalization';\nimport { ELEVENLABS_VOICES } from '../config/elevenlabs-config';\n\nconsole.log('üß™ Testing ElevenLabs AI Integration\\n');\n\n// Test data for the 4 target sports\nconst testSports = [\n  {\n    name: 'Generic',\n    context: {\n      sport: 'generic',\n      experienceLevel: 'intermediate',\n      primaryFocus: 'performance'\n    }\n  },\n  {\n    name: 'Pole Vault',\n    context: {\n      sport: 'track-and-field',\n      trackFieldEvent: 'pole-vault',\n      experienceLevel: 'intermediate',\n      primaryFocus: 'performance'\n    }\n  },\n  {\n    name: 'Soccer',\n    context: {\n      sport: 'soccer',\n      experienceLevel: 'intermediate',\n      primaryFocus: 'performance'\n    }\n  },\n  {\n    name: 'Distance Running',\n    context: {\n      sport: 'distance-running',\n      experienceLevel: 'intermediate',\n      primaryFocus: 'performance'\n    }\n  }\n];\n\n// Base visualization template\nconst baseVisualization = {\n  id: 'peak-performance-sports',\n  title: 'Peak Performance Visualization',\n  category: 'performance',\n  steps: [\n    'Find a comfortable position and close your eyes. Take deep breaths.',\n    'Visualize yourself in your performance environment. See the details.',\n    'See yourself performing at your absolute best. Feel the confidence.',\n    'Experience the emotion of success. Let it fill your body.',\n    'Open your eyes and carry this feeling with you.'\n  ]\n};\n\nasync function testPersonalizationForSport(sportInfo: any) {\n  console.log(`\\nüìä Testing ${sportInfo.name} Personalization`);\n  console.log('=' .repeat(50));\n  \n  const service = ElevenLabsAIPersonalizationService.getInstance();\n  \n  const request: PersonalizationRequest = {\n    userContext: sportInfo.context,\n    visualizationId: baseVisualization.id,\n    visualizationTitle: baseVisualization.title,\n    visualizationCategory: baseVisualization.category as any,\n    baseContent: baseVisualization.steps,\n    tone: 'motivational',\n    length: 'medium'\n  };\n  \n  try {\n    console.log(`Sport: ${sportInfo.name}`);\n    console.log(`Context: ${JSON.stringify(sportInfo.context, null, 2)}`);\n    \n    const startTime = Date.now();\n    const result = await service.generatePersonalizedVisualization(request);\n    const endTime = Date.now();\n    \n    console.log(`\\n‚úÖ Generated successfully in ${endTime - startTime}ms`);\n    console.log(`Model: ${result.model}`);\n    console.log(`Cache Key: ${result.cacheKey}`);\n    console.log(`Steps: ${result.steps.length}`);\n    console.log(`Generated: ${result.generatedAt}`);\n    \n    console.log('\\nüìù Personalized Content:');\n    result.steps.forEach((step, index) => {\n      console.log(`\\nStep ${index + 1}:`);\n      console.log(`  Original: \"${baseVisualization.steps[index]}\"`);\n      console.log(`  Personalized: \"${step.content}\"`);\n      console.log(`  Duration: ${step.duration}s`);\n      console.log(`  Personalized Elements: ${step.personalizedElements.join(', ')}`); \n      console.log(`  Changed: ${step.content !== baseVisualization.steps[index] ? '‚úÖ YES' : '‚ùå NO'}`);\n    });\n    \n    return result;\n    \n  } catch (error) {\n    console.error(`‚ùå Error testing ${sportInfo.name}:`, error);\n    throw error;\n  }\n}\n\nasync function testVoiceConfiguration() {\n  console.log('\\nüéôÔ∏è Testing Voice Configuration');\n  console.log('=' .repeat(50));\n  \n  console.log('Available voices:');\n  Object.entries(ELEVENLABS_VOICES).forEach(([key, voiceId]) => {\n    console.log(`  ${key}: ${voiceId}`);\n  });\n  \n  console.log('\\nTarget voices for app:');\n  console.log(`  Christina (Calming Yoga): ${ELEVENLABS_VOICES.christina}`);\n  console.log(`  Mark (Conversational): ${ELEVENLABS_VOICES.mark}`);\n  console.log(`  Benjamin (Deep Warm): ${ELEVENLABS_VOICES.benjamin}`);\n}\n\nasync function testCachePerformance() {\n  console.log('\\nüöÄ Testing Cache Performance');\n  console.log('=' .repeat(50));\n  \n  const service = ElevenLabsAIPersonalizationService.getInstance();\n  \n  const request: PersonalizationRequest = {\n    userContext: { sport: 'pole-vault', experienceLevel: 'intermediate', primaryFocus: 'performance' },\n    visualizationId: baseVisualization.id,\n    visualizationTitle: baseVisualization.title,\n    visualizationCategory: baseVisualization.category as any,\n    baseContent: baseVisualization.steps,\n    tone: 'motivational',\n    length: 'medium'\n  };\n  \n  // First call - should generate\n  console.log('First call (should generate):');\n  const start1 = Date.now();\n  await service.generatePersonalizedVisualization(request);\n  const end1 = Date.now();\n  console.log(`  Time: ${end1 - start1}ms`);\n  \n  // Second call - should use cache\n  console.log('\\nSecond call (should use cache):');\n  const start2 = Date.now();\n  await service.generatePersonalizedVisualization(request);\n  const end2 = Date.now();\n  console.log(`  Time: ${end2 - start2}ms`);\n  \n  const speedup = Math.round((end1 - start1) / (end2 - start2));\n  console.log(`\\nCache speedup: ${speedup}x faster`);\n  \n  // Cache stats\n  const stats = service.getCacheStats();\n  console.log('\\nCache stats:', stats);\n}\n\nasync function runTests() {\n  try {\n    // Test voice configuration\n    await testVoiceConfiguration();\n    \n    // Test each sport\n    const results = [];\n    for (const sport of testSports) {\n      const result = await testPersonalizationForSport(sport);\n      results.push({\n        sport: sport.name,\n        result,\n        personalizedSteps: result.steps.filter(step => \n          step.content !== baseVisualization.steps[result.steps.indexOf(step)]\n        ).length\n      });\n    }\n    \n    // Test cache performance\n    await testCachePerformance();\n    \n    // Summary\n    console.log('\\nüìà Test Summary');\n    console.log('=' .repeat(50));\n    results.forEach(result => {\n      const personalizationRate = (result.personalizedSteps / result.result.steps.length) * 100;\n      console.log(`${result.sport}: ${result.personalizedSteps}/${result.result.steps.length} steps personalized (${personalizationRate.toFixed(0)}%)`);\n    });\n    \n    console.log('\\n‚úÖ All tests completed successfully!');\n    \n  } catch (error) {\n    console.error('‚ùå Test failed:', error);\n    process.exit(1);\n  }\n}\n\n// Run the tests\nrunTests().catch(console.error);